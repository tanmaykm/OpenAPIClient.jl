# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""A category for a pet

    Category(;
        id=nothing,
        name=nothing,
    )

    - id::Int64
    - name::String
"""
mutable struct Category <: OpenAPIClient.APIModel
    id::Any # spec type: Union{ Nothing, Int64 } # spec name: id
    name::Any # spec type: Union{ Nothing, String } # spec name: name

    function Category(;id=nothing, name=nothing, )
        o = new()
        validate_property(Category, Symbol("id"), id)
        setfield!(o, Symbol("id"), id)
        validate_property(Category, Symbol("name"), name)
        setfield!(o, Symbol("name"), name)
        o
    end
end # type Category

const _property_map_Category = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("name")=>Symbol("name"), )
const _property_types_Category = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("name")=>"String", )
Base.propertynames(::Type{ Category }) = collect(keys(_property_map_Category))
OpenAPIClient.property_type(::Type{ Category }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Category[name]))}
OpenAPIClient.field_name(::Type{ Category }, property_name::Symbol) =  _property_map_Category[property_name]

function check_required(o::Category)
    true
end

function validate_property(::Type{ Category }, name::Symbol, val)
end
