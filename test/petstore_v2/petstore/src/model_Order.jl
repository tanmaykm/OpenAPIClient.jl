# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    Order(;
        id=nothing,
        petId=nothing,
        quantity=nothing,
        shipDate=nothing,
        status=nothing,
        complete=nothing,
    )

    - id::Int64
    - petId::Int64
    - quantity::Int32
    - shipDate::ZonedDateTime
    - status::String : Order Status
    - complete::Bool
"""
Base.@kwdef mutable struct Order <: OpenAPIClient.APIModel
    id = nothing # spec type: Union{ Nothing, Int64 }
    petId = nothing # spec type: Union{ Nothing, Int64 }
    quantity = nothing # spec type: Union{ Nothing, Int32 }
    shipDate = nothing # spec type: Union{ Nothing, ZonedDateTime }
    status = nothing # spec type: Union{ Nothing, String }
    complete = nothing # spec type: Union{ Nothing, Bool }

    function Order(id, petId, quantity, shipDate, status, complete, )
        validate_property(Order, Symbol("id"), id)
        validate_property(Order, Symbol("petId"), petId)
        validate_property(Order, Symbol("quantity"), quantity)
        validate_property(Order, Symbol("shipDate"), shipDate)
        validate_property(Order, Symbol("status"), status)
        validate_property(Order, Symbol("complete"), complete)
        return new(id, petId, quantity, shipDate, status, complete, )
    end
end # type Order

const _property_types_Order = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("petId")=>"Int64", Symbol("quantity")=>"Int32", Symbol("shipDate")=>"ZonedDateTime", Symbol("status")=>"String", Symbol("complete")=>"Bool", )
OpenAPIClient.property_type(::Type{ Order }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Order[name]))}

function check_required(o::Order)
    true
end

function validate_property(::Type{ Order }, name::Symbol, val)
    if name === Symbol("status")
        OpenAPIClient.validate_param(name, "Order", :enum, val, ["placed", "approved", "delivered"])
    end
end
