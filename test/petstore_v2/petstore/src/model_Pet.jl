# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    Pet(;
        id=nothing,
        category=nothing,
        name=nothing,
        photoUrls=nothing,
        tags=nothing,
        status=nothing,
    )

    - id::Int64
    - category::Category
    - name::String
    - photoUrls::Vector{String}
    - tags::Vector{Tag}
    - status::String : pet status in the store
"""
Base.@kwdef mutable struct Pet <: OpenAPIClient.APIModel
    id = nothing # spec type: Union{ Nothing, Int64 }
    category = nothing # spec type: Union{ Nothing, Category }
    name = nothing # spec type: Union{ Nothing, String }
    photoUrls = nothing # spec type: Union{ Nothing, Vector{String} }
    tags = nothing # spec type: Union{ Nothing, Vector{Tag} }
    status = nothing # spec type: Union{ Nothing, String }

    function Pet(id, category, name, photoUrls, tags, status, )
        validate_property(Pet, Symbol("id"), id)
        validate_property(Pet, Symbol("category"), category)
        validate_property(Pet, Symbol("name"), name)
        validate_property(Pet, Symbol("photoUrls"), photoUrls)
        validate_property(Pet, Symbol("tags"), tags)
        validate_property(Pet, Symbol("status"), status)
        return new(id, category, name, photoUrls, tags, status, )
    end
end # type Pet

const _property_types_Pet = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("category")=>"Category", Symbol("name")=>"String", Symbol("photoUrls")=>"Vector{String}", Symbol("tags")=>"Vector{Tag}", Symbol("status")=>"String", )
OpenAPIClient.property_type(::Type{ Pet }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_Pet[name]))}

function check_required(o::Pet)
    o.name === nothing && (return false)
    o.photoUrls === nothing && (return false)
    true
end

function validate_property(::Type{ Pet }, name::Symbol, val)
    if name === Symbol("status")
        OpenAPIClient.validate_param(name, "Pet", :enum, val, ["available", "pending", "sold"])
    end
end
