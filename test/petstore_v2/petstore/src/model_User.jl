# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.


@doc raw"""
    User(;
        id=nothing,
        username=nothing,
        firstName=nothing,
        lastName=nothing,
        email=nothing,
        password=nothing,
        phone=nothing,
        userStatus=nothing,
    )

    - id::Int64
    - username::String
    - firstName::String
    - lastName::String
    - email::String
    - password::String
    - phone::String
    - userStatus::Int32 : User Status
"""
Base.@kwdef mutable struct User <: OpenAPIClient.APIModel
    id::Any = nothing # spec type: Union{ Nothing, Int64 } # spec name: id
    username::Any = nothing # spec type: Union{ Nothing, String } # spec name: username
    firstName::Any = nothing # spec type: Union{ Nothing, String } # spec name: firstName
    lastName::Any = nothing # spec type: Union{ Nothing, String } # spec name: lastName
    email::Any = nothing # spec type: Union{ Nothing, String } # spec name: email
    password::Any = nothing # spec type: Union{ Nothing, String } # spec name: password
    phone::Any = nothing # spec type: Union{ Nothing, String } # spec name: phone
    userStatus::Any = nothing # spec type: Union{ Nothing, Int32 } # spec name: userStatus

    function User(id, username, firstName, lastName, email, password, phone, userStatus, )
        validate_property(User, Symbol("id"), id)
        validate_property(User, Symbol("username"), username)
        validate_property(User, Symbol("firstName"), firstName)
        validate_property(User, Symbol("lastName"), lastName)
        validate_property(User, Symbol("email"), email)
        validate_property(User, Symbol("password"), password)
        validate_property(User, Symbol("phone"), phone)
        validate_property(User, Symbol("userStatus"), userStatus)
        return new(id, username, firstName, lastName, email, password, phone, userStatus, )
    end
end # type User

const _property_map_User = Dict{Symbol,Symbol}(Symbol("id")=>Symbol("id"), Symbol("username")=>Symbol("username"), Symbol("firstName")=>Symbol("firstName"), Symbol("lastName")=>Symbol("lastName"), Symbol("email")=>Symbol("email"), Symbol("password")=>Symbol("password"), Symbol("phone")=>Symbol("phone"), Symbol("userStatus")=>Symbol("userStatus"), )
const _property_types_User = Dict{Symbol,String}(Symbol("id")=>"Int64", Symbol("username")=>"String", Symbol("firstName")=>"String", Symbol("lastName")=>"String", Symbol("email")=>"String", Symbol("password")=>"String", Symbol("phone")=>"String", Symbol("userStatus")=>"Int32", )
Base.propertynames(::Type{ User }) = collect(keys(_property_map_User))
OpenAPIClient.property_type(::Type{ User }, name::Symbol) = Union{Nothing,eval(Base.Meta.parse(_property_types_User[name]))}
OpenAPIClient.field_name(::Type{ User }, property_name::Symbol) =  _property_map_User[property_name]

function check_required(o::User)
    true
end

function validate_property(::Type{ User }, name::Symbol, val)
end
