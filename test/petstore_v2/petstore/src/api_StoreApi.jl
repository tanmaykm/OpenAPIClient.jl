# This file was generated by the Julia OpenAPI Code Generator
# Do not modify this file directly. Modify the OpenAPI specification instead.

struct StoreApi <: OpenAPIClient.APIImpl
    client::OpenAPIClient.Client
end

function _oacinternal_deleteOrder(_api::StoreApi, in_orderId::Int64; _mediaType=nothing)
    OpenAPIClient.validate_param("orderId", "deleteOrder", :minimum, in_orderId, 1, false)

    _ctx = OpenAPIClient.Ctx(_api.client, "DELETE", Nothing, "/store/order/{orderId}", [])
    OpenAPIClient.set_param(_ctx.path, "orderId", in_orderId)  # type Int64
    OpenAPIClient.set_header_accept(_ctx, [])
    OpenAPIClient.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Delete purchase order by ID

For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors

Params:
- in_orderId::Int64 (required)

Return: Nothing
"""
function deleteOrder(_api::StoreApi, in_orderId; _mediaType=nothing)
    _ctx = _oacinternal_deleteOrder(_api, in_orderId; _mediaType=_mediaType)
    OpenAPIClient.exec(_ctx)
end

function deleteOrder(_api::StoreApi, response_stream::Channel, in_orderId::Int64; _mediaType=nothing)
    _ctx = _oacinternal_deleteOrder(_api, in_orderId; _mediaType=_mediaType)
    OpenAPIClient.exec(_ctx, response_stream)
end

function _oacinternal_getInventory(_api::StoreApi; _mediaType=nothing)
    _ctx = OpenAPIClient.Ctx(_api.client, "GET", Dict{String, Int64}, "/store/inventory", ["api_key", ])
    OpenAPIClient.set_header_accept(_ctx, ["application/json", ])
    OpenAPIClient.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Returns pet inventories by status

Returns a map of status codes to quantities

Params:

Return: Dict{String, Int64}
"""
function getInventory(_api::StoreApi; _mediaType=nothing)
    _ctx = _oacinternal_getInventory(_api; _mediaType=_mediaType)
    OpenAPIClient.exec(_ctx)
end

function getInventory(_api::StoreApi, response_stream::Channel; _mediaType=nothing)
    _ctx = _oacinternal_getInventory(_api; _mediaType=_mediaType)
    OpenAPIClient.exec(_ctx, response_stream)
end

function _oacinternal_getOrderById(_api::StoreApi, in_orderId::Int64; _mediaType=nothing)
    OpenAPIClient.validate_param("orderId", "getOrderById", :maximum, in_orderId, 10, false)
    OpenAPIClient.validate_param("orderId", "getOrderById", :minimum, in_orderId, 1, false)

    _ctx = OpenAPIClient.Ctx(_api.client, "GET", Order, "/store/order/{orderId}", [])
    OpenAPIClient.set_param(_ctx.path, "orderId", in_orderId)  # type Int64
    OpenAPIClient.set_header_accept(_ctx, ["application/json", "application/xml", ])
    OpenAPIClient.set_header_content_type(_ctx, (_mediaType === nothing) ? [] : [_mediaType])
    return _ctx
end

@doc raw"""Find purchase order by ID

For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions

Params:
- in_orderId::Int64 (required)

Return: Order
"""
function getOrderById(_api::StoreApi, in_orderId; _mediaType=nothing)
    _ctx = _oacinternal_getOrderById(_api, in_orderId; _mediaType=_mediaType)
    OpenAPIClient.exec(_ctx)
end

function getOrderById(_api::StoreApi, response_stream::Channel, in_orderId::Int64; _mediaType=nothing)
    _ctx = _oacinternal_getOrderById(_api, in_orderId; _mediaType=_mediaType)
    OpenAPIClient.exec(_ctx, response_stream)
end

function _oacinternal_placeOrder(_api::StoreApi, in_body::Order; _mediaType=nothing)
    _ctx = OpenAPIClient.Ctx(_api.client, "POST", Order, "/store/order", [], in_body)
    OpenAPIClient.set_header_accept(_ctx, ["application/json", "application/xml", ])
    OpenAPIClient.set_header_content_type(_ctx, (_mediaType === nothing) ? ["application/json", ] : [_mediaType])
    return _ctx
end

@doc raw"""Place an order for a pet

Params:
- in_body::Order (required)

Return: Order
"""
function placeOrder(_api::StoreApi, in_body; _mediaType=nothing)
    _ctx = _oacinternal_placeOrder(_api, in_body; _mediaType=_mediaType)
    OpenAPIClient.exec(_ctx)
end

function placeOrder(_api::StoreApi, response_stream::Channel, in_body::Order; _mediaType=nothing)
    _ctx = _oacinternal_placeOrder(_api, in_body; _mediaType=_mediaType)
    OpenAPIClient.exec(_ctx, response_stream)
end

export deleteOrder
export getInventory
export getOrderById
export placeOrder
